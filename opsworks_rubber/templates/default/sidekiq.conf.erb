# /etc/init/sidekiq.conf - Sidekiq config

# This example config should work with Ubuntu 12.04+.  It
# allows you to manage multiple Sidekiq instances with
# Upstart, Ubuntu's native service management tool.
#
# See rubber.conf for how to manage all Sidekiq instances at once.
#
# Save this config as /etc/init/sidekiq.conf then mange sidekiq with:
#   sudo start sidekiq index=0
#   sudo stop sidekiq index=0
#   sudo status sidekiq index=0
#
# or use the service command:
#   sudo service sidekiq {start,stop,restart,status}
#

description "Sidekiq Background Worker"

# no "start on", we don't want to automatically start
stop on (stopping rubber or runlevel [06])

# change to match your deployment user
setuid <%= @deploy[:user] %>
setgid <%= @deploy[:group] %>

respawn
respawn limit 3 30

# TERM is sent by sidekiqctl when stopping sidekiq.
# Without declaring these as normal exit codes, it just respawns.
normal exit 0 TERM

instance $index
env LANG=en_US.UTF-8

pre-start script
  cd <%= @deploy[:current_path] %>
  exec bundle install --path vendor/bundle
end script

# use syslog for logging
script
  . <%= @deploy[:deploy_to] %>/shared/app.env
  cd <%= @deploy[:current_path] %>
  exec bundle exec sidekiq --index ${index} --config <%= @conf_file %> --require <%= @require_file %> 2>&1 | logger -t sidekiq$index
end script
